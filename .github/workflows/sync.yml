name: Sync Docker Compose Installers

on:
  schedule:
    - cron: '0 0 * * *'   # 每天0点执行
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up downloads directory
        run: mkdir -p downloads

      - name: Set release tag as date
        run: echo "RELEASE_TAG=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Download Linux installers and related files
        run: |
          curl -fsSL -o downloads/docker-compose-linux-x86_64 https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64
          curl -fsSL -o downloads/docker-compose-linux-aarch64 https://github.com/docker/compose/releases/latest/download/docker-compose-linux-aarch64
          curl -fsSL -o downloads/docker-compose-linux-armv6 https://github.com/docker/compose/releases/latest/download/docker-compose-linux-armv6
          curl -fsSL -o downloads/docker-compose-linux-armv7 https://github.com/docker/compose/releases/latest/download/docker-compose-linux-armv7
          curl -fsSL -o downloads/docker-compose-linux-ppc64le https://github.com/docker/compose/releases/latest/download/docker-compose-linux-ppc64le
          curl -fsSL -o downloads/docker-compose-linux-riscv64 https://github.com/docker/compose/releases/latest/download/docker-compose-linux-riscv64
          curl -fsSL -o downloads/docker-compose-linux-s390x https://github.com/docker/compose/releases/latest/download/docker-compose-linux-s390x

      - name: Download macOS installers and related files
        run: |
          curl -fsSL -o downloads/docker-compose-darwin-x86_64 https://github.com/docker/compose/releases/latest/download/docker-compose-darwin-x86_64
          curl -fsSL -o downloads/docker-compose-darwin-aarch64 https://github.com/docker/compose/releases/latest/download/docker-compose-darwin-aarch64

      - name: Download Windows installers and related files
        run: |
          curl -fsSL -o downloads/docker-compose-windows-x86_64.exe https://github.com/docker/compose/releases/latest/download/docker-compose-windows-x86_64.exe
          curl -fsSL -o downloads/docker-compose-windows-aarch64.exe https://github.com/docker/compose/releases/latest/download/docker-compose-windows-aarch64.exe

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Docker Compose Installers (${{ env.RELEASE_TAG }})
          tag_name: ${{ env.RELEASE_TAG }}
          files: downloads/*
          body: |
            官方Docker Compose安装包，每日自动同步
            - Linux 多平台及架构
            - macOS Intel / Apple Silicon
            - Windows 多平台架构
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

  sync_to_gitee:
    needs: sync
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: |
          sudo apt update
          sudo apt install -y gh jq

      - name: Download GitHub Release assets
        run: |
          mkdir -p assets
          gh release download "${{ env.RELEASE_TAG }}" --dir assets
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

      - name: Sync Release to Gitee
        env:
          GITEE_TOKEN: ${{ secrets.GITEE_TOKEN }}
          GITEE_REPO: ${{ secrets.GITEE_REPO }}
          RELEASE_TAG: ${{ env.RELEASE_TAG }}
          RELEASE_NAME: Docker Compose Installers ${{ env.RELEASE_TAG }}
          RELEASE_BODY: |
            官方Docker Compose安装包，每日自动同步
            - Linux 多平台及架构
            - macOS Intel / Apple Silicon
            - Windows 多平台架构
        run: |
          response=$(curl -s -X POST "https://gitee.com/api/v5/repos/${GITEE_REPO}/releases?access_token=${GITEE_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "$(jq -n \
                  --arg tag_name "$RELEASE_TAG" \
                  --arg name "$RELEASE_NAME" \
                  --arg body "$RELEASE_BODY" \
                  --arg target_commitish "main" \
                  '{tag_name: $tag_name, name: $name, body: $body, prerelease: false, target_commitish: $target_commitish}')")

          release_id=$(echo "$response" | jq -r '.id')

          if [ "$release_id" = "null" ] || [ -z "$release_id" ]; then
            echo "Failed to create Gitee release. Response: $response"
            exit 1
          fi

          echo "Created Gitee release with ID: $release_id"

          for file in assets/*; do
            filename=$(basename "$file")
            echo "Uploading asset: $filename"

            upload_response=$(curl -s -X POST "https://gitee.com/api/v5/repos/${GITEE_REPO}/releases/${release_id}/assets?access_token=${GITEE_TOKEN}" \
              -F "name=${filename}" \
              -F "attachment=@${file}")

            echo "Upload response: $upload_response"
          done
